Library <unnamed> (/home/vdin/dev/polars_dart/packages/polars/lib/polars.dart):
  Globals:
  - DataType int8;
  - DataType int16;
  - DataType int32;
  - DataType int64;
  - DataType uint8;
  - DataType uint16;
  - DataType uint32;
  - DataType uint64;
  - DataType utf8;
  - DataType boolean;
  - DataType binary;
  - DataType time;
  - DataType unknown;
  Accessors:
  - DataType get int8;
  - DataType get int16;
  - DataType get int32;
  - DataType get int64;
  - DataType get uint8;
  - DataType get uint16;
  - DataType get uint32;
  - DataType get uint64;
  - DataType get utf8;
  - DataType get boolean;
  - DataType get binary;
  - DataType get time;
  - DataType get unknown;
  Functions:
  - Future<void> initialize({ExternalLibrary? dylib});
  - Future<DataFrame> readCsv({required String path, List<DataType>? dtypesSlice, bool? hasHeader, List<String>? columns, String? commentChar, String? eolChar, int? chunkSize, int? sampleSize, RowCount? rowCount, CsvEncoding? encoding, int? nRows, int? nThreads, NullValues? nullValues, Uint32List? projection, String? quoteChar = '"', int skipRows = 0, int skipRowsAfterHeader = 0, bool ignoreErrors = false, bool rechunk = false, bool tryParseDates = true, bool lowMemory = false, dynamic hint});
  - Future<LazyFrame> scanCsv({required String path, required OptionSchema dtypeOverwrite, bool? hasHeader, String? commentChar, String? eolChar, String? quoteChar = '"', int skipRows = 0, int skipRowsAfterHeader = 0, RowCount? rowCount, CsvEncoding? encoding, int? nRows, NullValues? nullValues, bool ignoreErrors = false, bool rechunk = false, bool tryParseDates = true, int? inferSchemaLength = 100, bool cache = false, dynamic hint});
  - Future<DataFrame> readJson({required String path, int? batchSize, List<String>? projection, dynamic hint});
  - Future<List<dynamic>> parseRow(FutureOr<List<dynamic>> row, {bool growable = true});
  - dynamic parseCell(dynamic raw);
  - Expr col(String column);
  - Expr cols(Iterable<String> columns);
  - Expr dtypes(Iterable<DataType> dtypes);
  - Expr lit(Object? value);
  - When when(Object? condition, {required Object? then});
  - DataFrame df(Map<String, dynamic> data, {Map<String, DataType> dtypes = const {}});
  - Series series<T>(List<T> data, {String name = '', DataType dtype = const DataType.utf8()});
  Enums:
  - enum UniqueKeepStrategy
  - enum CsvEncoding
  - enum JoinType
  - enum QuantileInterpolOptions
  - enum TimeUnit
  - enum Ambiguous
  - enum ClosedWindow
  - enum IsSorted
  - enum Operator
  - enum WindowMapping
  Extensions:
  - extension SeriesExt on Series
  - extension DataFrameExt on DataFrame
  - extension LiteralValueExt on LiteralValue
  - extension ExprExt on Expr
  - extension StringPolars on String
  - extension IntPolars on int
  - extension DoublePolars on double
  - extension BoolPolars on bool
  - extension DateTimePolars on DateTime
  - extension DurationPolars on Duration
  - extension DynamicPolars on dynamic
  - extension LiteralsExt on Literals
Library <unnamed> (/home/vdin/dev/polars_dart/packages/polars/lib/src/extensions.dart):
  Functions:
  - Future<List<dynamic>> parseRow(FutureOr<List<dynamic>> row, {bool growable = true});
  - dynamic parseCell(dynamic raw);
  Extensions:
  - extension SeriesExt on Series
  - extension DataFrameExt on DataFrame
Library <unnamed> (/home/vdin/dev/polars_dart/packages/polars/lib/src/str.dart):
Library <unnamed> (/home/vdin/dev/polars_dart/packages/polars/lib/src/df.dart):
  Functions:
  - DataFrame df(Map<String, dynamic> data, {Map<String, DataType> dtypes = const {}});
  Extensions:
  - extension LiteralsExt on Literals
Library <unnamed> (/home/vdin/dev/polars_dart/packages/polars/lib/src/wrapper/str.dart):
Library <unnamed> (/home/vdin/dev/polars_dart/packages/polars/lib/src/wrapper/df.dart):
  Enums:
  - enum UniqueKeepStrategy
Library <unnamed> (/home/vdin/dev/polars_dart/packages/polars/lib/src/wrapper/series.dart):
Library <unnamed> (/home/vdin/dev/polars_dart/packages/polars/lib/src/wrapper/expr.dart):
  Enums:
  - enum Ambiguous
  - enum ClosedWindow
  - enum IsSorted
  - enum Operator
  - enum WindowMapping
Library <unnamed> (/home/vdin/dev/polars_dart/packages/polars/lib/src/wrapper/entry.dart):
  Functions:
  - Future<DataFrame> readCsv({required String path, List<DataType>? dtypesSlice, bool? hasHeader, List<String>? columns, String? commentChar, String? eolChar, int? chunkSize, int? sampleSize, RowCount? rowCount, CsvEncoding? encoding, int? nRows, int? nThreads, NullValues? nullValues, Uint32List? projection, String? quoteChar = '"', int skipRows = 0, int skipRowsAfterHeader = 0, bool ignoreErrors = false, bool rechunk = false, bool tryParseDates = true, bool lowMemory = false, dynamic hint});
  - Future<LazyFrame> scanCsv({required String path, required OptionSchema dtypeOverwrite, bool? hasHeader, String? commentChar, String? eolChar, String? quoteChar = '"', int skipRows = 0, int skipRowsAfterHeader = 0, RowCount? rowCount, CsvEncoding? encoding, int? nRows, NullValues? nullValues, bool ignoreErrors = false, bool rechunk = false, bool tryParseDates = true, int? inferSchemaLength = 100, bool cache = false, dynamic hint});
  - Future<DataFrame> readJson({required String path, int? batchSize, List<String>? projection, dynamic hint});
  Enums:
  - enum CsvEncoding
  - enum JoinType
  - enum QuantileInterpolOptions
  - enum TimeUnit
Library <unnamed> (/home/vdin/dev/polars_dart/packages/polars/lib/src/frb_generated.dart):
Library <unnamed> (/home/vdin/dev/polars_dart/packages/polars/lib/src/frb_generated.io.dart):
Library <unnamed> (/home/vdin/dev/polars_dart/packages/polars/lib/src/series.dart):
  Functions:
  - Series series<T>(List<T> data, {String name = '', DataType dtype = const DataType.utf8()});
Library <unnamed> (/home/vdin/dev/polars_dart/packages/polars/lib/src/expr.dart):
  Globals:
  - DataType int8;
  - DataType int16;
  - DataType int32;
  - DataType int64;
  - DataType uint8;
  - DataType uint16;
  - DataType uint32;
  - DataType uint64;
  - DataType utf8;
  - DataType boolean;
  - DataType binary;
  - DataType time;
  - DataType unknown;
  Accessors:
  - DataType get int8;
  - DataType get int16;
  - DataType get int32;
  - DataType get int64;
  - DataType get uint8;
  - DataType get uint16;
  - DataType get uint32;
  - DataType get uint64;
  - DataType get utf8;
  - DataType get boolean;
  - DataType get binary;
  - DataType get time;
  - DataType get unknown;
  Functions:
  - Expr col(String column);
  - Expr cols(Iterable<String> columns);
  - Expr dtypes(Iterable<DataType> dtypes);
  - Expr lit(Object? value);
  - When when(Object? condition, {required Object? then});
  Extensions:
  - extension LiteralValueExt on LiteralValue
  - extension ExprExt on Expr
  - extension StringPolars on String
  - extension IntPolars on int
  - extension DoublePolars on double
  - extension BoolPolars on bool
  - extension DateTimePolars on DateTime
  - extension DurationPolars on Duration
  - extension DynamicPolars on dynamic
